// Generated by CoffeeScript 1.4.0
(function() {
  var BALLOON_OFFSET, GroupedMarker, INIT_LATITUDE, INIT_LONGTITUDE, Item, Map, SEARCH_ZOOM_LEVEL, USER_ID, api_url, load_address, load_mmc_location, read_user_follow_items, resizeContentHeight, search_item;

  $(document).ready(function() {
    resizeContentHeight();
    $(window).bind("resize", resizeContentHeight);
    $('#item-pickup-target').bind('change', function() {
      search_item($('#item-pickup-target').val(), $('#item-pickup-category').val(), $('#item-pickup-input').val());
      return false;
    });
    $('#item-pickup-category').bind('change', function() {
      search_item($('#item-pickup-target').val(), $('#item-pickup-category').val(), $('#item-pickup-input').val());
      return false;
    });
    $('#item-pickup-form').bind('submit', function() {
      search_item($('#item-pickup-target').val(), $('#item-pickup-category').val(), $('#item-pickup-input').val());
      return false;
    });
    $('#mmc-location-button').bind('click', function() {
      return load_mmc_location();
    });
    $('#location-search').bind('submit', function() {
      load_address($('#address-input').val());
      return false;
    });
    load_mmc_location();
    return $('#clear_select').hide();
  });

  load_mmc_location = function() {
    return Map.get().load();
  };

  resizeContentHeight = function() {
    var contentsHeight;
    contentsHeight = window.innerHeight - $('.navbar').height() - 30;
    if (contentsHeight < 0) {
      contentsHeight = 0;
    }
    $('#map_canvas').height(contentsHeight);
    return $('#search-result').height(contentsHeight);
  };

  load_address = function(address) {
    var geocoder;
    geocoder = new google.maps.Geocoder();
    return geocoder.geocode({
      address: address
    }, function(results, status) {
      var latlng, m;
      if (status === google.maps.GeocoderStatus.OK) {
        latlng = results[0].geometry.location;
        m = Map.get(latlng);
        m.gmap.setZoom(SEARCH_ZOOM_LEVEL);
        return m.load();
      } else {
        return alert("Geocode failed: " + status);
      }
    });
  };

  api_url = function(endpoint) {
    var api_url_base;
    api_url_base = "http://tab.do/api/1/";
    return "" + api_url_base + endpoint + ".json";
  };

  read_user_follow_items = function(cb) {
    var url;
    url = api_url("users/" + USER_ID + "/items");
    return $.get(url, {}, cb);
  };

  search_item = function(target, category, word) {
    Map.get().update(target, category, word);
    return true;
  };

  Map = (function() {
    var _instance;

    _instance = void 0;

    Map.get = function(latlng) {
      if (latlng == null) {
        latlng = new google.maps.LatLng(INIT_LATITUDE, INIT_LONGTITUDE);
      }
      if (_instance != null) {
        _instance.setCenter(latlng);
      } else {
        _instance = new Map(latlng);
      }
      return _instance;
    };

    function Map(latlng, zoom) {
      var control, myOptions, template,
        _this = this;
      if (zoom == null) {
        zoom = SEARCH_ZOOM_LEVEL;
      }
      this.markers = [];
      this.openGroupedInfoWindowFn = {};
      this.zorder = 0;
      this.loaded_data = null;
      this.grouped_marker_array = [];
      myOptions = {
        zoom: zoom,
        center: latlng,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        scrollwheel: false
      };
      this.gmap = new google.maps.Map(document.getElementById('map_canvas'), myOptions);
      template = Handlebars.compile($('#refresh-control-template').html());
      control = $(template({}))[0];
      google.maps.event.addDomListener(control, 'click', function() {
        return _this.load();
      });
      this.gmap.controls[google.maps.ControlPosition.TOP_RIGHT].push(control);
    }

    Map.prototype.setCenter = function(latlng) {
      return this.gmap.setCenter(latlng);
    };

    Map.prototype.createGroupedMarkers = function(new_item) {
      var id, latlng;
      latlng = new_item.latlng();
      id = new_item.item.places[0].id;
      if (latlng != null) {
        if (!(this.grouped_marker_array[id] != null)) {
          this.grouped_marker_array[id] = new GroupedMarker;
        }
        this.grouped_marker_array[id].count++;
        this.grouped_marker_array[id].name = new_item.item.places[0].name;
        return this.grouped_marker_array[id].latlng = latlng;
      }
    };

    Map.prototype.showGroupedMarkers = function() {
      var grouped_marker, key, marker, _ref, _results;
      _ref = this.grouped_marker_array;
      _results = [];
      for (key in _ref) {
        grouped_marker = _ref[key];
        marker = new google.maps.Marker({
          position: grouped_marker.latlng,
          map: this.gmap
        });
        grouped_marker.createInfoHtml();
        grouped_marker.marker = marker;
        _results.push(this.bindBalloonToMarker(key));
      }
      return _results;
    };

    Map.prototype.bindBalloonToMarker = function(index) {
      var grouped_marker,
        _this = this;
      grouped_marker = this.grouped_marker_array[index];
      this.openGroupedInfoWindowFn[index] = function() {
        var marker, _i, _j, _len, _len1, _ref, _ref1;
        if (grouped_marker.openedInfoWindows) {
          _ref = _this.markers;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            marker = _ref[_i];
            if (marker.getPosition() !== grouped_marker.latlng) {
              marker.setVisible(false);
            }
          }
          $('.entry').each(function() {
            var id;
            id = $(this).data("spot-id");
            if (id !== parseInt(index)) {
              return $(this).hide();
            }
          });
          grouped_marker.infoWindow.open(_this.gmap, grouped_marker.marker);
          grouped_marker.openedInfoWindows = false;
          $('#clear_select').show(500);
          return $('#clear_select').bind('click', function(event) {
            return _this.clearSelect();
          });
        } else {
          _ref1 = _this.markers;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            marker = _ref1[_j];
            marker.setVisible(true);
          }
          $('.entry').each(function() {
            return $(this).show();
          });
          grouped_marker.infoWindow.close();
          grouped_marker.openedInfoWindows = true;
          return $('#clear_select').hide();
        }
      };
      google.maps.event.addListener(grouped_marker.marker, 'click', this.openGroupedInfoWindowFn[index]);
      return this.markers.push(grouped_marker.marker);
    };

    Map.prototype.clearSelect = function() {
      var grouped_marker, key, marker, _base, _i, _len, _ref, _ref1;
      _ref = this.grouped_marker_array;
      for (key in _ref) {
        grouped_marker = _ref[key];
        if (typeof (_base = grouped_marker.infoWindow).close === "function") {
          _base.close();
        }
        grouped_marker.openedInfoWindows = true;
      }
      _ref1 = this.markers;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        marker = _ref1[_i];
        marker.setVisible(true);
      }
      $('.entry').each(function() {
        return $(this).show();
      });
      return $('#clear_select').hide();
    };

    Map.prototype.clearMarkers = function() {
      var item, marker, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.loaded_data.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.infoWindow != null) {
          item.infoWindow.close();
          item.infoWindow = null;
        }
      }
      _ref1 = this.markers;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        marker = _ref1[_j];
        marker.setMap(null);
      }
      this.markers = [];
      return this.openGroupedInfoWindowFn = {};
    };

    Map.prototype.load = function(latlng) {
      var read_nearby_popular_with_current_map_range, result_div,
        _this = this;
      if (latlng == null) {
        latlng = this.gmap.getCenter();
      }
      console.log("load");
      result_div = $('#search-result');
      result_div.empty();
      result_div.html("<div class='loading-text'>Loading...</div>");
      read_nearby_popular_with_current_map_range = function() {
        var bounds, dist;
        bounds = _this.gmap.getBounds();
        if (bounds != null) {
          console.log(bounds.toString());
          dist = google.maps.geometry.spherical.computeDistanceBetween(bounds.getNorthEast(), bounds.getSouthWest());
          return read_user_follow_items(function(data) {
            console.log("data loaded");
            console.log(data);
            _this.loaded_data = data;
            return _this.update();
          });
        } else {
          return setTimeout(read_nearby_popular_with_current_map_range, 1000);
        }
      };
      return read_nearby_popular_with_current_map_range();
    };

    Map.prototype.update = function(target, category, word) {
      var bDescription, bTitle, item, item_instance, result_div, _i, _len, _ref,
        _this = this;
      if (target == null) {
        target = ".*";
      }
      if (category == null) {
        category = ".*";
      }
      if (word == null) {
        word = ".*";
      }
      console.log("update");
      result_div = $('#search-result');
      result_div.empty();
      this.clearMarkers();
      this.grouped_marker_array = [];
      this.zorder = 0;
      if (!(this.loaded_data != null)) {
        return;
      }
      _ref = this.loaded_data.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item_instance = new Item(item);
        bTitle = item.title.match(new RegExp(target)) && item.title.match(new RegExp(category)) && item.title.match(new RegExp(word));
        bDescription = item.description.match(new RegExp(target)) && item.description.match(new RegExp(category)) && item.description.match(new RegExp(word));
        if (!(bTitle || bDescription)) {
          continue;
        }
        result_div.append(item_instance.html());
        this.createGroupedMarkers(item_instance);
        this.showGroupedMarkers();
      }
      return $('.item_title').bind('click', function(event) {
        var spot_id;
        spot_id = $(event.currentTarget).parents("li.entry").data('spot-id');
        return _this.openGroupedInfoWindowFn[spot_id]();
      });
    };

    return Map;

  })();

  GroupedMarker = (function() {

    function GroupedMarker() {
      this.name = "";
      this.count = 0;
      this.latlng = null;
      this.infoWindow = null;
      this.openedInfoWindows = true;
      this.marker = null;
    }

    GroupedMarker.prototype.renderContext = function() {
      return {
        spot_name: this.name,
        spot_count: this.count
      };
    };

    GroupedMarker.prototype.infoHtml = function() {
      var template;
      template = Handlebars.compile($('#info-window-template').html());
      return template(this.renderContext());
    };

    GroupedMarker.prototype.createInfoHtml = function() {
      return this.infoWindow = new google.maps.InfoWindow({
        content: this.infoHtml()
      });
    };

    return GroupedMarker;

  })();

  Item = (function() {
    var truncate;

    function Item(item) {
      this.item = item;
    }

    Item.prototype.renderContext = function() {
      var item_img_m, item_img_s, now, passedDate, spot_id, spot_name, updated_at;
      updated_at = new Date(this.item.updated_at);
      now = new Date();
      passedDate = (now - updated_at) / (1000 * 60 * 60 * 24);
      item_img_s = "";
      item_img_m = "";
      if (this.item.image_urls[0] != null) {
        item_img_s = this.item.image_urls[0].crop_S;
      }
      if (this.item.image_urls[0] != null) {
        item_img_m = this.item.image_urls[0].crop_M;
      }
      spot_id = 0;
      spot_name = "";
      if (this.item.places[0] != null) {
        spot_id = this.item.places[0].id;
      }
      if (this.item.places[0] != null) {
        spot_name = this.item.places[0].name;
      }
      return {
        id: this.item.id,
        short_title: truncate(this.item.title, 20),
        title: this.item.title,
        short_description: truncate(this.item.description, 50),
        long_description: truncate(this.item.description, 300),
        image_url_small: item_img_s,
        image_url: item_img_m,
        profile_image_url: this.item.user.profile_image_url.crop_S,
        tab_url: "https://tab.do/items/" + this.item.id,
        stream_url: "https://tab.do/streams/" + this.item.stream.id,
        stream_title: this.item.stream.title,
        is_new: passedDate < 1,
        spot_id: spot_id,
        spot_name: spot_name
      };
    };

    Item.prototype.html = function() {
      var template;
      template = Handlebars.compile($('#entry-template').html());
      return template(this.renderContext());
    };

    Item.prototype.latlng = function() {
      var place;
      if (this.item.places.length > 0) {
        place = this.item.places[0];
        return new google.maps.LatLng(place.lat, place.lon);
      }
    };

    truncate = function(string, maxchars) {
      if (!(string != null)) {
        "";

      }
      if (string.length <= maxchars || maxchars <= 3) {
        return string;
      } else {
        return string.slice(0, maxchars - 3) + '...';
      }
    };

    return Item;

  })();

  SEARCH_ZOOM_LEVEL = 16;

  USER_ID = 47009;

  INIT_LATITUDE = 35.457611;

  INIT_LONGTITUDE = 139.633296;

  BALLOON_OFFSET = -110;

}).call(this);
