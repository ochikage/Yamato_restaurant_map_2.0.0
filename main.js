// Generated by CoffeeScript 1.4.0
(function() {
  var BALLOON_OFFSET, Content, INIT_LATITUDE, INIT_LONGTITUDE, Item, Map, SEARCH_ZOOM_LEVEL, Spot, USER_ID, api_url, load_address, load_mmc_location, read_user_follow_items, resizeContentHeight, search_item;

  $(document).ready(function() {
    var content;
    content = Content.get();
    resizeContentHeight();
    $(window).bind("resize", resizeContentHeight);
    $('#item-pickup-target').bind('change', function() {
      search_item($('#item-pickup-target').val(), $('#item-pickup-category').val(), $('#item-pickup-input').val());
      return false;
    });
    $('#item-pickup-category').bind('change', function() {
      search_item($('#item-pickup-target').val(), $('#item-pickup-category').val(), $('#item-pickup-input').val());
      return false;
    });
    $('#item-pickup-form').bind('submit', function() {
      search_item($('#item-pickup-target').val(), $('#item-pickup-category').val(), $('#item-pickup-input').val());
      return false;
    });
    $('#clear_select').bind('click', function() {
      content.clearSelect();
      $('.entry').each(function() {
        return $(this).show();
      });
      return $('#clear_select').hide();
    });
    $('#mmc-location-button').bind('click', function() {
      return load_mmc_location();
    });
    $('#location-search').bind('submit', function() {
      load_address($('#address-input').val());
      return false;
    });
    load_mmc_location();
    return $('#clear_select').hide();
  });

  load_mmc_location = function() {
    var content;
    content = Content.get();
    return content.load();
  };

  resizeContentHeight = function() {
    var contentsHeight;
    contentsHeight = window.innerHeight - $('.navbar').height() - 30;
    if (contentsHeight < 0) {
      contentsHeight = 0;
    }
    $('#map_canvas').height(contentsHeight);
    return $('#search-result').height(contentsHeight);
  };

  load_address = function(address) {
    var geocoder;
    geocoder = new google.maps.Geocoder();
    return geocoder.geocode({
      address: address
    }, function(results, status) {
      var latlng, m;
      if (status === google.maps.GeocoderStatus.OK) {
        latlng = results[0].geometry.location;
        m = Map.get(latlng);
        m.gmap.setZoom(SEARCH_ZOOM_LEVEL);
        return m.load();
      } else {
        return alert("Geocode failed: " + status);
      }
    });
  };

  api_url = function(endpoint) {
    var api_url_base;
    api_url_base = "http://tab.do/api/1/";
    return "" + api_url_base + endpoint + ".json";
  };

  read_user_follow_items = function(cb) {
    var url;
    url = api_url("users/" + USER_ID + "/items");
    return $.get(url, {}, cb);
  };

  search_item = function(target, category, word) {
    var content;
    content = Content.get();
    content.getSelect(target, category, word);
    return true;
  };

  Map = (function() {

    function Map(latlng, zoom) {
      var myOptions;
      if (latlng == null) {
        latlng = new google.maps.LatLng(INIT_LATITUDE, INIT_LONGTITUDE);
      }
      if (zoom == null) {
        zoom = SEARCH_ZOOM_LEVEL;
      }
      myOptions = {
        zoom: zoom,
        center: latlng,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        scrollwheel: false
      };
      this.gmap = new google.maps.Map(document.getElementById('map_canvas'), myOptions);
    }

    Map.prototype.load = function(latlng) {
      var read_nearby_popular_with_current_map_range,
        _this = this;
      if (latlng == null) {
        latlng = this.gmap.getCenter();
      }
      read_nearby_popular_with_current_map_range = function() {
        var bounds, dist;
        bounds = _this.gmap.getBounds();
        if (bounds != null) {
          return dist = google.maps.geometry.spherical.computeDistanceBetween(bounds.getNorthEast(), bounds.getSouthWest());
        } else {
          return setTimeout(read_nearby_popular_with_current_map_range, 1000);
        }
      };
      return read_nearby_popular_with_current_map_range();
    };

    return Map;

  })();

  Item = (function() {
    var truncate;

    function Item(data) {
      this.data = data;
    }

    Item.prototype.renderContext = function() {
      var item_img_m, item_img_s, now, passedDate, spot_id, spot_name, updated_at;
      updated_at = new Date(this.data.updated_at);
      now = new Date();
      passedDate = (now - updated_at) / (1000 * 60 * 60 * 24);
      item_img_s = "";
      item_img_m = "";
      if (this.data.image_urls[0] != null) {
        item_img_s = this.data.image_urls[0].crop_S;
      }
      if (this.data.image_urls[0] != null) {
        item_img_m = this.data.image_urls[0].crop_M;
      }
      spot_id = 0;
      spot_name = "";
      if (this.data.places[0] != null) {
        spot_id = this.data.places[0].id;
      }
      if (this.data.places[0] != null) {
        spot_name = this.data.places[0].name;
      }
      return {
        id: this.data.id,
        short_title: truncate(this.data.title, 20),
        title: this.data.title,
        short_description: truncate(this.data.description, 50),
        long_description: truncate(this.data.description, 300),
        image_url_small: item_img_s,
        image_url: item_img_m,
        profile_image_url: this.data.user.profile_image_url.crop_S,
        tab_url: "https://tab.do/items/" + this.data.id,
        stream_url: "https://tab.do/streams/" + this.data.stream.id,
        stream_title: this.data.stream.title,
        is_new: passedDate < 1,
        spot_id: spot_id,
        spot_name: spot_name
      };
    };

    Item.prototype.html = function() {
      var template;
      template = Handlebars.compile($('#entry-template').html());
      return template(this.renderContext());
    };

    Item.prototype.latlng = function() {
      var place;
      if (this.data.places.length > 0) {
        place = this.data.places[0];
        return new google.maps.LatLng(place.lat, place.lon);
      }
    };

    Item.prototype.getItemId = function() {
      return this.data.id;
    };

    Item.prototype.getSpotId = function() {
      var id;
      id = 0;
      if (this.data.places[0] != null) {
        id = this.data.places[0].id;
      }
      return id;
    };

    Item.prototype.getSpotName = function() {
      var name;
      name = "N/A";
      if (this.data.places[0] != null) {
        name = this.data.places[0].name;
      }
      return name;
    };

    Item.prototype.getTitle = function() {
      return this.data.title;
    };

    Item.prototype.getDescription = function() {
      return this.data.description;
    };

    Item.prototype.getListElement = function() {
      return this.list_el;
    };

    Item.prototype.setListElement = function(list_el) {
      return this.list_el = list_el;
    };

    truncate = function(string, maxchars) {
      if (!(string != null)) {
        "";

      }
      if (string.length <= maxchars || maxchars <= 3) {
        return string;
      } else {
        return string.slice(0, maxchars - 3) + '...';
      }
    };

    return Item;

  })();

  SEARCH_ZOOM_LEVEL = 16;

  USER_ID = 47009;

  INIT_LATITUDE = 35.457611;

  INIT_LONGTITUDE = 139.633296;

  BALLOON_OFFSET = -110;

  Spot = (function() {

    function Spot(name, latlng) {
      this.name = name;
      this.count = 1;
      this.latlng = latlng;
      this.marker = null;
      this.balloon = null;
      this.balloonFn = null;
      this.IsBalloonOpened = true;
    }

    Spot.prototype.renderContext = function() {
      return {
        spot_name: this.name,
        spot_count: this.count
      };
    };

    Spot.prototype.infoHtml = function() {
      var template;
      template = Handlebars.compile($('#info-window-template').html());
      return template(this.renderContext());
    };

    Spot.prototype.createInfoHtml = function() {
      return this.balloon = new google.maps.InfoWindow({
        content: this.infoHtml()
      });
    };

    return Spot;

  })();

  Content = (function() {
    var _instance;

    _instance = null;

    Content.get = function() {
      if (_instance != null) {
        return _instance;
      } else {
        return _instance = new Content;
      }
    };

    function Content() {
      this.items = [];
      this.spots = [];
      this.map = new Map();
      this.list_div = $('#search-result');
    }

    Content.prototype.load = function() {
      var _this = this;
      this.list_div.empty();
      this.list_div.html("<div class='loading-text'>Loading...</div>");
      this.map.load();
      return read_user_follow_items(function(ret) {
        var data, _i, _len, _ref;
        _ref = ret.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          data = _ref[_i];
          _this.items.push(new Item(data));
        }
        return _this.update();
      });
    };

    Content.prototype.update = function() {
      var item, _i, _len, _ref,
        _this = this;
      this.clear();
      if (this.items === null) {
        return;
      }
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.setListElement($(item.html()).appendTo(this.list_div));
        this.addSpot(item);
      }
      this.placeMarkers();
      return $('.item_title').bind('click', function(event) {
        var spot_id;
        spot_id = $(event.currentTarget).parents("li.entry").data('spot-id');
        return _this.spots[spot_id].balloonFn();
      });
    };

    Content.prototype.addSpot = function(item) {
      var id, latlng;
      latlng = item.latlng();
      id = item.getSpotId();
      if (latlng != null) {
        if (!(this.spots[id] != null)) {
          return this.spots[id] = new Spot(item.getSpotName(), latlng);
        } else {
          return this.spots[id].count++;
        }
      }
    };

    Content.prototype.placeMarkers = function() {
      var key, spot, _ref, _results;
      _ref = this.spots;
      _results = [];
      for (key in _ref) {
        spot = _ref[key];
        console.log(key);
        spot.marker = new google.maps.Marker({
          position: spot.latlng,
          map: this.map.gmap
        });
        spot.createInfoHtml();
        _results.push(this.bindBalloonToMarker(key));
      }
      return _results;
    };

    Content.prototype.bindBalloonToMarker = function(index) {
      var spot,
        _this = this;
      spot = this.spots[index];
      spot.balloonFn = function() {
        var item, spot_id, _i, _len, _ref;
        if (spot.IsBalloonOpened) {
          _this.setListVisible(false);
          _ref = _this.items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            spot_id = item.getSpotId();
            if (spot_id === parseInt(index)) {
              item.getListElement().show();
            }
          }
          _this.setMarkerVisible(false);
          spot.marker.setVisible(true);
          spot.balloon.open(_this.map.gmap, spot.marker);
          spot.IsBalloonOpened = false;
          return $('#clear_select').show(500);
        } else {
          _this.setListVisible(true);
          _this.setMarkerVisible(true);
          spot.balloon.close();
          spot.IsBalloonOpened = true;
          return $('#clear_select').hide();
        }
      };
      return google.maps.event.addListener(spot.marker, 'click', spot.balloonFn);
    };

    Content.prototype.getSelect = function(target, category, word) {
      var bDescription, bTitle, item, spot_id, _i, _len, _ref;
      this.setListVisible(false);
      this.setMarkerVisible(false);
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        bTitle = item.getTitle().match(new RegExp(target)) && item.getTitle().match(new RegExp(category)) && item.getTitle().match(new RegExp(word));
        bDescription = item.getDescription().match(new RegExp(target)) && item.getDescription().match(new RegExp(category)) && item.getDescription().match(new RegExp(word));
        spot_id = item.getSpotId();
        if ((bTitle != null) || (bDescription != null)) {
          item.getListElement().show();
          this.spots[spot_id].marker.setVisible(true);
        }
      }
      return true;
    };

    Content.prototype.setListVisible = function(visible) {
      var item, _i, _len, _ref, _results;
      _ref = this.items;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (visible) {
          _results.push(item.getListElement().show());
        } else {
          _results.push(item.getListElement().hide());
        }
      }
      return _results;
    };

    Content.prototype.setMarkerVisible = function(visible) {
      var key, spot, _ref, _results;
      _ref = this.spots;
      _results = [];
      for (key in _ref) {
        spot = _ref[key];
        _results.push(spot.marker.setVisible(visible));
      }
      return _results;
    };

    Content.prototype.clearSelect = function() {
      var key, spot, _base, _ref, _results;
      _ref = this.spots;
      _results = [];
      for (key in _ref) {
        spot = _ref[key];
        if (typeof (_base = spot.balloon).close === "function") {
          _base.close();
        }
        spot.IsBalloonOpened = true;
        _results.push(spot.marker.setVisible(true));
      }
      return _results;
    };

    Content.prototype.clear = function() {
      var item, key, spot, _i, _len, _ref, _ref1, _results;
      this.list_div.empty();
      _ref = this.spots;
      for (key in _ref) {
        spot = _ref[key];
        spot.marker.setMap(null);
      }
      _ref1 = this.items;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        item = _ref1[_i];
        if (item.infoWindow != null) {
          item.infoWindow.close();
          _results.push(item.infoWindow = null);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Content;

  })();

}).call(this);
